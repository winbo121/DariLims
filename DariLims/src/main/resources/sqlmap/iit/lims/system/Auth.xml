<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="system">

	<!-- 권한관리 목록 조회 -->
	<select id="system.selectAuthGroupList" parameterType="AuthVO" resultType="AuthVO">
		SELECT ROLE_NO
		       ,ROLE_GROUP_NM
		       ,ROLE_DESC
		       ,DISP_ORDER
		       ,CASE WHEN USE_FLAG = 'Y' THEN '사용'
               	 ELSE '미사용' 
             	END AS USE_FLAG
               ,(SELECT USER_NM FROM USER_INFO WHERE USER_ID = RG.CREATER_ID) AS CREATER_ID
               ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE 	
		  FROM ROLE_GROUP RG
		  <if test="sortName != null and sortName != '' ">
			ORDER BY ${sortName} ${sortType}
		  </if>
		  <if test="sortName == null or sortName == '' ">
			ORDER BY DISP_ORDER 
		  </if>
	</select>
	
	<insert id="system.insertAuthGroup" parameterType="AuthVO">
		INSERT INTO ROLE_GROUP(ROLE_NO
						       ,ROLE_GROUP_NM
						       ,ROLE_DESC
						       ,DISP_ORDER
						       ,USE_FLAG
						       ,CREATER_ID
						       ,CREATE_DATE
					   )VALUES(#{role_no}
						       ,#{role_group_nm}
						       ,#{role_desc}
						       ,#{disp_order}
						       ,#{use_flag}
						       ,'ADMIN'
						       ,SYSDATE
							  )
	</insert>
	
	<update id="system.updateAuthGroup" parameterType="AuthVO">
		UPDATE ROLE_GROUP
		   SET ROLE_GROUP_NM = #{role_group_nm}
		   	   ,ROLE_DESC = #{role_desc}
		   	   ,DISP_ORDER = #{disp_order}
		   	   ,USE_FLAG = #{use_flag}
		   	   ,UPDATER_ID = 'ADMIN'
		   	   ,UPDATE_DATE = SYSDATE
		 WHERE ROLE_NO = #{role_no}  	   
	</update>
	
	<delete id="system.delAuthGroup" parameterType="AuthVO">
		DELETE FROM ROLE_GROUP
		 WHERE ROLE_NO = #{role_no}  	   
	</delete>
	
	<!-- 권한관리 목록 조회 -->
	<select id="system.selectCmmnMenuList" parameterType="AuthVO" resultType="AuthVO">
		SELECT MENU_CD
		       ,MENU_NM
		       ,(SELECT MENU_NM FROM MENU WHERE MENU_CD = MN.PRE_MENU_CD) AS PRE_MENU_NM 
		 FROM MENU MN
		WHERE MENU_CD NOT IN (
			                   SELECT MENU_CD
			                     FROM ROLE_GROUP_MENU 
			                    WHERE ROLE_NO = #{role_no}
			                  )
		AND USE_FLAG = 'Y'     
		AND SUBSTR(MENU_CD, 3, 6) NOT IN ('0000')
		<if test="sortName != null and sortName != '' ">
			ORDER BY ${sortName} ${sortType}
		</if>
		<if test="sortName == null or sortName == '' ">
			ORDER BY MENU_CD, DISP_ORDER 
		</if>
	</select>
	
	<!-- 권한관리 목록 조회 -->
	<select id="system.selectAuthMenuList" parameterType="AuthVO" resultType="AuthVO">
		SELECT 
			RGM.ROLE_NO
			,RGM.AUTH_SELECT
   			,RGM.AUTH_SAVE
	        ,RGM.MENU_CD 
	        ,MN.MENU_NM
	        ,(SELECT MENU_NM FROM MENU WHERE MENU_CD = MN.PRE_MENU_CD) AS PRE_MENU_NM
		FROM ROLE_GROUP_MENU RGM
		JOIN MENU MN ON MN.MENU_CD = RGM.MENU_CD
		WHERE RGM.ROLE_NO = #{role_no}
		<if test="sortName != null and sortName != '' ">
			ORDER BY ${sortName} ${sortType}
		</if>
		<if test="sortName == null or sortName == '' ">
			ORDER BY MENU_CD, DISP_ORDER 
		</if>
	</select>
	
	<!-- 권한관리 수정 -->
	<insert id="system.insertAuthMenu" parameterType="AuthVO">
		INSERT INTO ROLE_GROUP_MENU (ROLE_NO
									 ,MENU_CD
									 ,CREATER_ID
									 ,CREATE_DATE
									 ,AUTH_SELECT
   									 ,AUTH_SAVE
							 )VALUES(#{role_no}
							 		 ,#{menu_cd}
							 		 ,'ADMIN'
							 		 ,SYSDATE
							 		 ,'1'
							 		 ,'1'
							 		)
	</insert>
	
	
	<delete id="system.deleteAuthMenu" parameterType="AuthVO">
		DELETE ROLE_GROUP_MENU WHERE ROLE_NO = #{role_no} AND MENU_CD = #{menu_cd}
	</delete>
	
	<update id="system.saveAuthMenu" parameterType="AuthVO">
		UPDATE ROLE_GROUP_MENU SET
			AUTH_SELECT = #{auth_select}
			,AUTH_SAVE = #{auth_save}
		WHERE ROLE_NO = #{role_no} AND MENU_CD = #{menu_cd}
	</update>
	
</mapper>
